"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var fs = require("fs");
var path = require("path");
var grunt = require("grunt");
var utils = require("./utils");

var referenceMatch = /\/\/\/ <reference path=\"(.*?)\"/g;

function updateDebugFile(files,option) {
    console.log("start debugjs:"+option);
    var orders = getReference(files);
    var templete = grunt.file.read(option[0]);
    var contents = "";
    orders.forEach(function (filename) {
        filename = filename.replace(".ts",".js");
        filename = filename.replace("src/","");
        contents += "    <script src='"+filename+"'></script>\r\n";
    });
    templete = templete.replace("<%script%/>",contents);
    grunt.file.write(option[1]+"/index.html", templete);
}



function getReference(files){
    referenceMatch = /reference path=\"(.*?)\"/;
    var fileobj = {};
    var filemap = {};
    var reference = [];
    var filelist = [];
    for(var i = 0;i<files.length;i++){
        var relativepath = files[i]
       
        var filepath = path.resolve(relativepath);
        var content = grunt.file.read(filepath);
        var filename = filepath.slice(filepath.lastIndexOf("\\")+1).toLocaleLowerCase();
        var arr = fileobj[filename] = [];
        filemap[filename] = relativepath;
        // console.log(filename+":"+relativepath+":"+files[i]);
        filelist.push(filename);
        while(true){
            var match = referenceMatch.exec(content);
            if(match){
                content = content.replace(match[0],"");
                // console.log(filename+":"+match[1]);
                // console.log(content);
                filepath = match[1];
                arr.push(filepath.slice(filepath.lastIndexOf("/")+1).toLocaleLowerCase());
            }else{
                break;
            }
        }
        
        // var match = content.match(referenceMatch);
        // console.log(content);
        // break;
    }

    

    function process(arr){
        
        for(i=0;i<arr.length;i++){
            var key = arr[i];
            if(reference.indexOf(key) != -1){
                continue;
            }else{
                if(undefined != fileobj[key]){
                    process(fileobj[key]);
                }                
            }
            if(undefined != key){
                reference.push(key);
            }
        }
    }

    process(filelist);

    for(i=0;i<reference.length;i++){
        // console.log(reference[i] + ":" +filemap[reference[i]]);
        reference[i] = filemap[reference[i]];
    }

    return reference;
};




function processIndividualTemplate(template) {
    if (template) {
        return grunt.template.process(template, {});
    }
    return template;
}

exports.updateDebugFile = updateDebugFile;